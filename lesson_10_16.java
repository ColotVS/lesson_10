import java.util.Scanner;

public class lesson_10_16 {
    //Поиск подстрок

    //Вторая по популярности операция после сравнения строк — это поиск одной строки в другой.
    //Для этого у класса String тоже есть немного методов:
    //Методы	                                Описание
    //int indexOf(String str)                   Ищет строку str в текущей строке. Возвращает индекс первого символа встретившейся строки.
    //int indexOf(String str, int index)        Ищет строку str в текущей строке, пропустив index первых символов.
                                                //Возвращает индекс найденного вхождения.
    //int lastIndexOf(String str)               Ищет строку str в текущей строке с конца. Возвращает индекс первого вхождения.
    //int lastIndexOf(String str, int index)    Ищет строку str в текущей строке с конца, пропустив index первых символов.
    //boolean matches(String regex)             Проверяет, что текущая строка совпадает с шаблоном, заданным регулярным выражением.

    //Методы indexOf(String) и indexOf(String, index) часто используются в паре. Первый позволяет найти первое вхождение переданной подстроки в текущей строке. А второй метод позволяет найти второе, третье и т.д. вхождения за счет того, что пропускает первые index символов.
    //
    //Допустим, у нас есть url типа такого: «https://domen.com/about/reviews», и мы хотим заменить имя домена на javarush.com. Домены в урлах могут быть разными, но мы знаем, что:
    //
    //Перед именем домена идут два слеша //
    //После имени домена идет одинарный слеш /
    //Вот как бы выглядел код такой программы:
    public static void main(String[] args) {
        Scanner console = new Scanner(System.in);               //Создание объекта Scanner
        String path = console.nextLine();                       //Чтение строки с консоли

        int index = path.indexOf("//");                         //Получаем индекс первого вхождения строки //
        int index2 = path.indexOf("/", index + 2); //Получаем индекс первого вхождения строки /, но ищем только после символов //.

        String first = path.substring(0, index + 2);            //Получаем строку от начала и заканчивая символами //
        String last = path.substring(index2);                   //Получаем строку от / и до конца.

        String result = first + "javarush.com" + last;          //Склеиваем строки и новый домен.
        System.out.println(result);
    }
}
